// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String?
  eceBalance   Float    @default(0.0)
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  cards               Card[]
  transactionsFrom    Transaction[]        @relation("FromUser")
  transactionsTo      Transaction[]        @relation("ToUser")
  tradeOffersSent     TradeOffer[]         @relation("TradeOffersSent")
  tradeOffersReceived TradeOffer[]         @relation("TradeOffersReceived")
  appOrders           AppOrder[]
  orderRevisions      OrderRevision[]
  orderCommunications OrderCommunication[]
}

// Card model
model Card {
  id             String   @id @default(cuid())
  name           String
  description    String
  imageUrl       String
  rarity         String
  category       String
  company        String
  valuation      Float
  marketCap      Float?
  volume24h      Float    @default(0)
  priceChange24h Float    @default(0)
  attributes     Json     @default("{}")
  metadata       Json     @default("{}")
  ownerId        String?
  owner          User?    @relation(fields: [ownerId], references: [id])
  isListed       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  transactions    Transaction[]
  tradeOfferItems TradeOfferItem[]
}

// Transaction model
model Transaction {
  id         String   @id @default(cuid())
  fromUserId String?
  fromUser   User?    @relation("FromUser", fields: [fromUserId], references: [id])
  toUserId   String?
  toUser     User?    @relation("ToUser", fields: [toUserId], references: [id])
  cardId     String?
  card       Card?    @relation(fields: [cardId], references: [id])
  amount     Float
  currency   String   @default("ECE")
  type       String
  status     String   @default("pending")
  reference  String?
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// TradeOffer model
model TradeOffer {
  id         String           @id @default(cuid())
  senderId   String
  sender     User             @relation("TradeOffersSent", fields: [senderId], references: [id])
  receiverId String
  receiver   User             @relation("TradeOffersReceived", fields: [receiverId], references: [id])
  status     TradeOfferStatus @default(PENDING)
  message    String?
  expiresAt  DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relations
  items TradeOfferItem[]
}

// TradeOfferItem model
model TradeOfferItem {
  id           String             @id @default(cuid())
  tradeOfferId String
  tradeOffer   TradeOffer         @relation(fields: [tradeOfferId], references: [id])
  cardId       String
  card         Card               @relation(fields: [cardId], references: [id])
  role         TradeOfferItemRole
  quantity     Int                @default(1)
  createdAt    DateTime           @default(now())
}

// Enums
enum TradeOfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED
}

enum TradeOfferItemRole {
  OFFERED
  REQUESTED
}

// AppOrder model for app generation orders
model AppOrder {
  id                 String    @id @default(cuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  projectType        String
  title              String
  description        String
  requirements       Json      @default("{}")
  timeline           String
  estimatedCost      Float
  currency           String    @default("ECE")
  status             String    @default("PENDING")
  priority           String    @default("STANDARD")
  progressPercentage Int       @default(0)
  completedAt        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  revisions      OrderRevision[]
  communications OrderCommunication[]
}

// OrderRevision model
model OrderRevision {
  id             String    @id @default(cuid())
  orderId        String
  order          AppOrder  @relation(fields: [orderId], references: [id])
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  revisionNumber Int
  title          String
  description    String
  status         String    @default("PENDING")
  approvedAt     DateTime?
  rejectedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// OrderCommunication model  
model OrderCommunication {
  id          String   @id @default(cuid())
  orderId     String
  order       AppOrder @relation(fields: [orderId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  messageType String
  subject     String
  message     String
  isFromAdmin Boolean  @default(false)
  read        Boolean  @default(false)
  important   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
