'use strict'

Object.defineProperty(exports, '__esModule', { value: true })

var fs = require('fs')
var path = require('path')
var dotenv = require('dotenv')
var replace = require('@rollup/plugin-replace')

function _interopDefault(e) {
  return e && e.__esModule ? e : { default: e }
}

var fs__default = /*#__PURE__*/ _interopDefault(fs)
var path__default = /*#__PURE__*/ _interopDefault(path)
var dotenv__default = /*#__PURE__*/ _interopDefault(dotenv)
var replace__default = /*#__PURE__*/ _interopDefault(replace)

const mapKeys = (mapper, obj) =>
  Object.fromEntries(
    Object.entries(obj).map(([key, value]) => [mapper(key), value]),
  )
const mapValues = (mapper, obj) =>
  Object.fromEntries(
    Object.entries(obj).map(([key, value]) => [key, mapper(value)]),
  )
const pick = (props, obj) =>
  Object.fromEntries(props.map((prop) => [prop, obj[prop]]))
const shallowMergeAll = (objs) => Object.assign({}, ...objs)

const withDefaults = ({ cwd = '.', envKey = 'NODE_ENV' } = {}) => ({
  cwd: path__default['default'].resolve(process.cwd(), cwd),
  envKey,
})
function dotenvPlugin(inputOptions) {
  const { cwd, envKey } = withDefaults(inputOptions)
  return {
    ...replace__default['default']({
      values: ((envVars) =>
        mapValues((value) => JSON.stringify(value), envVars))(
        ((envVars) => mapKeys((key) => `process.env.${key}`, envVars))(
          ((envVars) =>
            shallowMergeAll([
              envVars,
              pick(
                Object.keys(envVars).filter(
                  (key) => process.env[key] !== undefined,
                ),
                process.env,
              ),
            ]))(
            shallowMergeAll(
              ((priorities) =>
                [...priorities]
                  .reverse()
                  .map((dotenvFile) =>
                    path__default['default'].join(cwd, dotenvFile),
                  )
                  .filter(fs__default['default'].existsSync)
                  .map((dotenvFile) =>
                    fs__default['default'].readFileSync(dotenvFile),
                  )
                  .map(dotenv__default['default'].parse))([
                `.env.${process.env[envKey]}.local`,
                `.env.${process.env[envKey]}`,
                '.env.local',
                '.env',
              ]),
            ),
          ),
        ),
      ),
      preventAssignment: false,
    }),
    name: 'dotenv',
  }
}

exports['default'] = dotenvPlugin
