import fs from 'fs'
import path from 'path'
import dotenv from 'dotenv'
import replace from '@rollup/plugin-replace'

const mapKeys = (mapper, obj) =>
  Object.fromEntries(
    Object.entries(obj).map(([key, value]) => [mapper(key), value]),
  )
const mapValues = (mapper, obj) =>
  Object.fromEntries(
    Object.entries(obj).map(([key, value]) => [key, mapper(value)]),
  )
const pick = (props, obj) =>
  Object.fromEntries(props.map((prop) => [prop, obj[prop]]))
const shallowMergeAll = (objs) => Object.assign({}, ...objs)

const withDefaults = ({ cwd = '.', envKey = 'NODE_ENV' } = {}) => ({
  cwd: path.resolve(process.cwd(), cwd),
  envKey,
})
function dotenvPlugin(inputOptions) {
  const { cwd, envKey } = withDefaults(inputOptions)
  return {
    ...replace({
      values: ((envVars) =>
        mapValues((value) => JSON.stringify(value), envVars))(
        ((envVars) => mapKeys((key) => `process.env.${key}`, envVars))(
          ((envVars) =>
            shallowMergeAll([
              envVars,
              pick(
                Object.keys(envVars).filter(
                  (key) => process.env[key] !== undefined,
                ),
                process.env,
              ),
            ]))(
            shallowMergeAll(
              ((priorities) =>
                [...priorities]
                  .reverse()
                  .map((dotenvFile) => path.join(cwd, dotenvFile))
                  .filter(fs.existsSync)
                  .map((dotenvFile) => fs.readFileSync(dotenvFile))
                  .map(dotenv.parse))([
                `.env.${process.env[envKey]}.local`,
                `.env.${process.env[envKey]}`,
                '.env.local',
                '.env',
              ]),
            ),
          ),
        ),
      ),
      preventAssignment: false,
    }),
    name: 'dotenv',
  }
}

export { dotenvPlugin as default }
