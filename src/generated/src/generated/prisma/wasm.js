
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  avatar: 'avatar',
  passwordHash: 'passwordHash',
  emailVerified: 'emailVerified',
  eceBalance: 'eceBalance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActive: 'lastActive'
};

exports.Prisma.UserSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  plan: 'plan',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionFeaturesScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  maxTrades: 'maxTrades',
  advancedAnalytics: 'advancedAnalytics',
  prioritySupport: 'prioritySupport',
  marketplaceAccess: 'marketplaceAccess',
  premiumListings: 'premiumListings',
  bulkOperations: 'bulkOperations',
  cryptoPayments: 'cryptoPayments',
  physicalCard: 'physicalCard',
  businessStipend: 'businessStipend',
  withdrawalLimit: 'withdrawalLimit'
};

exports.Prisma.SubscriptionUsageScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  tradesThisMonth: 'tradesThisMonth',
  listingsThisMonth: 'listingsThisMonth',
  stipendUsed: 'stipendUsed',
  lastResetAt: 'lastResetAt'
};

exports.Prisma.CardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  rarity: 'rarity',
  company: 'company',
  currentPrice: 'currentPrice',
  historicalPrices: 'historicalPrices',
  imageUrl: 'imageUrl',
  metadata: 'metadata',
  stats: 'stats',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketplaceListingScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  sellerId: 'sellerId',
  price: 'price',
  listingType: 'listingType',
  auctionEnd: 'auctionEnd',
  status: 'status',
  featured: 'featured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BidScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  bidderId: 'bidderId',
  cardId: 'cardId',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  cardId: 'cardId',
  type: 'type',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  description: 'description',
  metadata: 'metadata',
  paymentMethod: 'paymentMethod',
  paymentId: 'paymentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CryptoWalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  currency: 'currency',
  address: 'address',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PhysicalCardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  cardNumber: 'cardNumber',
  expiryDate: 'expiryDate',
  cvv: 'cvv',
  status: 'status',
  appleWalletPassId: 'appleWalletPassId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  read: 'read',
  priority: 'priority',
  requiresSubscription: 'requiresSubscription',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SocialFeedScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  content: 'content',
  data: 'data',
  likes: 'likes',
  comments: 'comments',
  shares: 'shares',
  visibility: 'visibility',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId',
  createdAt: 'createdAt'
};

exports.Prisma.AppOrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectType: 'projectType',
  title: 'title',
  description: 'description',
  requirements: 'requirements',
  timeline: 'timeline',
  estimatedCost: 'estimatedCost',
  actualCost: 'actualCost',
  currency: 'currency',
  status: 'status',
  priority: 'priority',
  deliveryDate: 'deliveryDate',
  githubRepo: 'githubRepo',
  vercelLink: 'vercelLink',
  downloadLink: 'downloadLink',
  progressPercentage: 'progressPercentage',
  currentMilestone: 'currentMilestone',
  assignedAdminId: 'assignedAdminId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderRevisionScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  userId: 'userId',
  revisionNumber: 'revisionNumber',
  title: 'title',
  description: 'description',
  status: 'status',
  adminResponse: 'adminResponse',
  adminId: 'adminId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderCommunicationScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  userId: 'userId',
  messageType: 'messageType',
  subject: 'subject',
  message: 'message',
  isFromAdmin: 'isFromAdmin',
  attachments: 'attachments',
  read: 'read',
  important: 'important',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderDeliverableScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  type: 'type',
  title: 'title',
  description: 'description',
  url: 'url',
  filePath: 'filePath',
  status: 'status',
  delivered: 'delivered',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BettingMarketScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  metricType: 'metricType',
  title: 'title',
  description: 'description',
  currentValue: 'currentValue',
  predictionTarget: 'predictionTarget',
  targetDirection: 'targetDirection',
  odds: 'odds',
  totalPot: 'totalPot',
  minimumBet: 'minimumBet',
  maximumBet: 'maximumBet',
  startTime: 'startTime',
  expiryDate: 'expiryDate',
  settlementDate: 'settlementDate',
  status: 'status',
  settled: 'settled',
  settledValue: 'settledValue',
  winningDirection: 'winningDirection',
  marketMakerFee: 'marketMakerFee',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BettingPositionScalarFieldEnum = {
  id: 'id',
  marketId: 'marketId',
  userId: 'userId',
  position: 'position',
  amount: 'amount',
  odds: 'odds',
  potentialWinning: 'potentialWinning',
  pickGroupId: 'pickGroupId',
  multiplier: 'multiplier',
  powerPlay: 'powerPlay',
  status: 'status',
  settled: 'settled',
  won: 'won',
  payout: 'payout',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketMetricsScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  marketId: 'marketId',
  revenue: 'revenue',
  userGrowth: 'userGrowth',
  valuation: 'valuation',
  marketCap: 'marketCap',
  quarterlyGrowth: 'quarterlyGrowth',
  userEngagement: 'userEngagement',
  productLaunches: 'productLaunches',
  competitorRank: 'competitorRank',
  sentimentScore: 'sentimentScore',
  trendingScore: 'trendingScore',
  socialMentions: 'socialMentions',
  recordDate: 'recordDate',
  dataSource: 'dataSource',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BettingPayoutScalarFieldEnum = {
  id: 'id',
  marketId: 'marketId',
  userId: 'userId',
  positionId: 'positionId',
  winnings: 'winnings',
  originalBet: 'originalBet',
  multiplier: 'multiplier',
  status: 'status',
  payoutDate: 'payoutDate',
  transactionId: 'transactionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CardAuctionScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  ownerId: 'ownerId',
  title: 'title',
  description: 'description',
  startPrice: 'startPrice',
  reservePrice: 'reservePrice',
  currentBid: 'currentBid',
  bidIncrement: 'bidIncrement',
  startTime: 'startTime',
  endTime: 'endTime',
  autoExtend: 'autoExtend',
  status: 'status',
  finalized: 'finalized',
  winnerId: 'winnerId',
  viewCount: 'viewCount',
  watcherCount: 'watcherCount',
  bidCount: 'bidCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuctionConditionsScalarFieldEnum = {
  id: 'id',
  auctionId: 'auctionId',
  proMembersOnly: 'proMembersOnly',
  minimumRating: 'minimumRating',
  geographicRestrictions: 'geographicRestrictions',
  minimumNetWorth: 'minimumNetWorth',
  verificationRequired: 'verificationRequired',
  minimumPortfolioValue: 'minimumPortfolioValue',
  minimumCardsOwned: 'minimumCardsOwned',
  industryRestrictions: 'industryRestrictions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuctionBidScalarFieldEnum = {
  id: 'id',
  auctionId: 'auctionId',
  bidderId: 'bidderId',
  bidAmount: 'bidAmount',
  maxAutoBid: 'maxAutoBid',
  bidType: 'bidType',
  status: 'status',
  isWinning: 'isWinning',
  outbidNotified: 'outbidNotified',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuctionWatcherScalarFieldEnum = {
  id: 'id',
  auctionId: 'auctionId',
  userId: 'userId',
  bidNotifications: 'bidNotifications',
  endingNotifications: 'endingNotifications',
  priceAlerts: 'priceAlerts',
  alertThreshold: 'alertThreshold',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuctionHistoryScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  auctionId: 'auctionId',
  salePrice: 'salePrice',
  sellerId: 'sellerId',
  buyerId: 'buyerId',
  saleType: 'saleType',
  marketTrends: 'marketTrends',
  priceHistory: 'priceHistory',
  daysSinceListing: 'daysSinceListing',
  numberOfBids: 'numberOfBids',
  highestBid: 'highestBid',
  saleDate: 'saleDate',
  createdAt: 'createdAt'
};

exports.Prisma.MABattleScalarFieldEnum = {
  id: 'id',
  initiatorCardId: 'initiatorCardId',
  targetCardId: 'targetCardId',
  initiatorUserId: 'initiatorUserId',
  targetUserId: 'targetUserId',
  battleType: 'battleType',
  title: 'title',
  description: 'description',
  stakes: 'stakes',
  timeline: 'timeline',
  votingPeriod: 'votingPeriod',
  status: 'status',
  resolved: 'resolved',
  viewCount: 'viewCount',
  participantCount: 'participantCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BattleProposalScalarFieldEnum = {
  id: 'id',
  battleId: 'battleId',
  proposerId: 'proposerId',
  proposalType: 'proposalType',
  title: 'title',
  description: 'description',
  terms: 'terms',
  valuation: 'valuation',
  paymentStructure: 'paymentStructure',
  timeline: 'timeline',
  synergies: 'synergies',
  conditions: 'conditions',
  contingencies: 'contingencies',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BattleVotingScalarFieldEnum = {
  id: 'id',
  battleId: 'battleId',
  proposalId: 'proposalId',
  voterId: 'voterId',
  vote: 'vote',
  voteWeight: 'voteWeight',
  reasoning: 'reasoning',
  confidence: 'confidence',
  eceStaked: 'eceStaked',
  expertRating: 'expertRating',
  portfolioValue: 'portfolioValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BattleOutcomeScalarFieldEnum = {
  id: 'id',
  battleId: 'battleId',
  winningBattleId: 'winningBattleId',
  winner: 'winner',
  winningProposalId: 'winningProposalId',
  finalTerms: 'finalTerms',
  finalValuation: 'finalValuation',
  implementation: 'implementation',
  stakeholdersPayouts: 'stakeholdersPayouts',
  tokenRewards: 'tokenRewards',
  completionDate: 'completionDate',
  realWorldImpact: 'realWorldImpact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PowerupTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  rarity: 'rarity',
  iconUrl: 'iconUrl',
  animationUrl: 'animationUrl',
  effectColor: 'effectColor',
  glowEffect: 'glowEffect',
  particleEffect: 'particleEffect',
  effects: 'effects',
  duration: 'duration',
  cooldown: 'cooldown',
  stackable: 'stackable',
  maxStacks: 'maxStacks',
  baseCost: 'baseCost',
  craftable: 'craftable',
  tradeable: 'tradeable',
  version: 'version',
  isActive: 'isActive',
  releaseDate: 'releaseDate',
  deprecatedAt: 'deprecatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPowerupScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  powerupId: 'powerupId',
  quantity: 'quantity',
  acquiredAt: 'acquiredAt',
  acquiredFrom: 'acquiredFrom',
  sourceId: 'sourceId',
  level: 'level',
  experience: 'experience',
  masteryLevel: 'masteryLevel',
  isLocked: 'isLocked',
  notes: 'notes',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CardPowerupScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  powerupId: 'powerupId',
  appliedBy: 'appliedBy',
  appliedAt: 'appliedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  level: 'level',
  stackCount: 'stackCount',
  effectiveness: 'effectiveness',
  lastActivated: 'lastActivated',
  cooldownEnds: 'cooldownEnds',
  usageCount: 'usageCount',
  maxUsages: 'maxUsages',
  customConfig: 'customConfig',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PowerupEffectScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  cardPowerupId: 'cardPowerupId',
  effectType: 'effectType',
  targetStat: 'targetStat',
  modifier: 'modifier',
  modifierType: 'modifierType',
  startedAt: 'startedAt',
  endsAt: 'endsAt',
  isActive: 'isActive',
  isPermanent: 'isPermanent',
  triggerCondition: 'triggerCondition',
  triggerValue: 'triggerValue',
  remainingTriggers: 'remainingTriggers',
  visualIndicator: 'visualIndicator',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PowerupHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  cardId: 'cardId',
  powerupId: 'powerupId',
  action: 'action',
  actionData: 'actionData',
  timestamp: 'timestamp',
  contextType: 'contextType',
  contextId: 'contextId',
  effectiveness: 'effectiveness',
  outcomeData: 'outcomeData'
};

exports.Prisma.PowerupRecipeScalarFieldEnum = {
  id: 'id',
  resultId: 'resultId',
  name: 'name',
  description: 'description',
  ingredients: 'ingredients',
  eceRequired: 'eceRequired',
  craftTime: 'craftTime',
  successRate: 'successRate',
  maxPerDay: 'maxPerDay',
  requiredLevel: 'requiredLevel',
  requiredBadge: 'requiredBadge',
  isActive: 'isActive',
  craftCount: 'craftCount',
  successCount: 'successCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PowerupCraftScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  recipeId: 'recipeId',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  successful: 'successful',
  ingredientsUsed: 'ingredientsUsed',
  eceSpent: 'eceSpent',
  resultPowerupId: 'resultPowerupId',
  bonusRewards: 'bonusRewards'
};

exports.Prisma.PowerupMarketListingScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  powerupId: 'powerupId',
  quantity: 'quantity',
  pricePerUnit: 'pricePerUnit',
  totalPrice: 'totalPrice',
  listingType: 'listingType',
  auctionEnd: 'auctionEnd',
  currentBid: 'currentBid',
  bidIncrement: 'bidIncrement',
  reservePrice: 'reservePrice',
  status: 'status',
  viewCount: 'viewCount',
  watcherCount: 'watcherCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PowerupPurchaseScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  listingId: 'listingId',
  powerupId: 'powerupId',
  quantity: 'quantity',
  pricePerUnit: 'pricePerUnit',
  totalPrice: 'totalPrice',
  paymentMethod: 'paymentMethod',
  status: 'status',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PowerupTradeScalarFieldEnum = {
  id: 'id',
  initiatorId: 'initiatorId',
  receiverId: 'receiverId',
  listingId: 'listingId',
  initiatorOffer: 'initiatorOffer',
  receiverOffer: 'receiverOffer',
  eceOffered: 'eceOffered',
  eceRequested: 'eceRequested',
  status: 'status',
  acceptedAt: 'acceptedAt',
  completedAt: 'completedAt',
  canceledAt: 'canceledAt',
  messages: 'messages',
  counterOffers: 'counterOffers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StakingPoolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  poolType: 'poolType',
  totalStaked: 'totalStaked',
  totalRewards: 'totalRewards',
  apy: 'apy',
  minStakeAmount: 'minStakeAmount',
  lockupPeriod: 'lockupPeriod',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StakingPositionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  poolId: 'poolId',
  amount: 'amount',
  stakedAt: 'stakedAt',
  unstakedAt: 'unstakedAt',
  lockupEndsAt: 'lockupEndsAt',
  isActive: 'isActive'
};

exports.Prisma.StakingRewardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  poolId: 'poolId',
  positionId: 'positionId',
  amount: 'amount',
  rewardType: 'rewardType',
  claimedAt: 'claimedAt',
  createdAt: 'createdAt'
};

exports.Prisma.GovernanceProposalScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  proposalType: 'proposalType',
  proposerId: 'proposerId',
  status: 'status',
  votingStartsAt: 'votingStartsAt',
  votingEndsAt: 'votingEndsAt',
  executionDate: 'executionDate',
  minQuorum: 'minQuorum',
  minApproval: 'minApproval',
  totalVotes: 'totalVotes',
  yesVotes: 'yesVotes',
  noVotes: 'noVotes',
  abstainVotes: 'abstainVotes',
  isExecuted: 'isExecuted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parameters: 'parameters'
};

exports.Prisma.GovernanceVoteScalarFieldEnum = {
  id: 'id',
  proposalId: 'proposalId',
  userId: 'userId',
  voteChoice: 'voteChoice',
  votingPower: 'votingPower',
  reason: 'reason',
  votedAt: 'votedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  FREE: 'FREE',
  PRO: 'PRO',
  ENTERPRISE: 'ENTERPRISE'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  CANCELED: 'CANCELED',
  PAST_DUE: 'PAST_DUE',
  UNPAID: 'UNPAID'
};

exports.CardCategory = exports.$Enums.CardCategory = {
  AUTOMOTIVE: 'AUTOMOTIVE',
  TECHNOLOGY: 'TECHNOLOGY',
  REAL_ESTATE: 'REAL_ESTATE',
  LUXURY: 'LUXURY',
  COLLECTIBLES: 'COLLECTIBLES',
  GAMING: 'GAMING',
  SPORTS: 'SPORTS',
  ENTERTAINMENT: 'ENTERTAINMENT'
};

exports.CardRarity = exports.$Enums.CardRarity = {
  COMMON: 'COMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY',
  MYTHIC: 'MYTHIC'
};

exports.ListingType = exports.$Enums.ListingType = {
  FIXED_PRICE: 'FIXED_PRICE',
  AUCTION: 'AUCTION',
  DUTCH_AUCTION: 'DUTCH_AUCTION'
};

exports.ListingStatus = exports.$Enums.ListingStatus = {
  ACTIVE: 'ACTIVE',
  SOLD: 'SOLD',
  EXPIRED: 'EXPIRED',
  CANCELED: 'CANCELED'
};

exports.BidStatus = exports.$Enums.BidStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL',
  PURCHASE: 'PURCHASE',
  SALE: 'SALE',
  TRADE: 'TRADE',
  REWARD: 'REWARD',
  REFUND: 'REFUND'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELED: 'CANCELED',
  REFUNDED: 'REFUNDED'
};

exports.PhysicalCardStatus = exports.$Enums.PhysicalCardStatus = {
  ACTIVE: 'ACTIVE',
  BLOCKED: 'BLOCKED',
  EXPIRED: 'EXPIRED',
  REQUESTED: 'REQUESTED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  MARKET: 'MARKET',
  SOCIAL: 'SOCIAL',
  TRADING: 'TRADING',
  IPO: 'IPO',
  PRICE_ALERT: 'PRICE_ALERT',
  SYSTEM: 'SYSTEM'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.SocialFeedType = exports.$Enums.SocialFeedType = {
  TRADE: 'TRADE',
  PURCHASE: 'PURCHASE',
  ACHIEVEMENT: 'ACHIEVEMENT',
  POST: 'POST',
  SHARE: 'SHARE'
};

exports.SocialVisibility = exports.$Enums.SocialVisibility = {
  PUBLIC: 'PUBLIC',
  FRIENDS: 'FRIENDS',
  PRIVATE: 'PRIVATE'
};

exports.ProjectType = exports.$Enums.ProjectType = {
  SAAS_DASHBOARD: 'SAAS_DASHBOARD',
  PORTFOLIO_SITE: 'PORTFOLIO_SITE',
  ECOMMERCE_STORE: 'ECOMMERCE_STORE',
  LANDING_PAGE: 'LANDING_PAGE',
  MOBILE_APP: 'MOBILE_APP',
  WEB_APP: 'WEB_APP',
  CUSTOM: 'CUSTOM'
};

exports.OrderTimeline = exports.$Enums.OrderTimeline = {
  RUSH_2_WEEKS: 'RUSH_2_WEEKS',
  STANDARD_1_MONTH: 'STANDARD_1_MONTH'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  IN_PROGRESS: 'IN_PROGRESS',
  REVIEW: 'REVIEW',
  REVISION_REQUESTED: 'REVISION_REQUESTED',
  COMPLETED: 'COMPLETED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.OrderPriority = exports.$Enums.OrderPriority = {
  STANDARD: 'STANDARD',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.RevisionStatus = exports.$Enums.RevisionStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED'
};

exports.CommunicationType = exports.$Enums.CommunicationType = {
  MESSAGE: 'MESSAGE',
  PROGRESS_UPDATE: 'PROGRESS_UPDATE',
  REVISION_REQUEST: 'REVISION_REQUEST',
  DELIVERY_NOTIFICATION: 'DELIVERY_NOTIFICATION',
  SYSTEM_ALERT: 'SYSTEM_ALERT'
};

exports.DeliverableType = exports.$Enums.DeliverableType = {
  GITHUB_REPO: 'GITHUB_REPO',
  VERCEL_DEPLOYMENT: 'VERCEL_DEPLOYMENT',
  ZIP_DOWNLOAD: 'ZIP_DOWNLOAD',
  DOCUMENTATION: 'DOCUMENTATION',
  ASSETS: 'ASSETS',
  APP_CARD: 'APP_CARD'
};

exports.DeliverableStatus = exports.$Enums.DeliverableStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  DELIVERED: 'DELIVERED'
};

exports.MarketMetricType = exports.$Enums.MarketMetricType = {
  REVENUE_GROWTH: 'REVENUE_GROWTH',
  USER_GROWTH: 'USER_GROWTH',
  VALUATION_CHANGE: 'VALUATION_CHANGE',
  MARKET_CAP: 'MARKET_CAP',
  QUARTERLY_PERFORMANCE: 'QUARTERLY_PERFORMANCE',
  PRODUCT_LAUNCH_SUCCESS: 'PRODUCT_LAUNCH_SUCCESS',
  COMPETITIVE_POSITION: 'COMPETITIVE_POSITION',
  SOCIAL_SENTIMENT: 'SOCIAL_SENTIMENT',
  TECHNOLOGY_ADOPTION: 'TECHNOLOGY_ADOPTION',
  REGULATORY_IMPACT: 'REGULATORY_IMPACT'
};

exports.PredictionDirection = exports.$Enums.PredictionDirection = {
  UP: 'UP',
  DOWN: 'DOWN'
};

exports.MarketStatus = exports.$Enums.MarketStatus = {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  SETTLED: 'SETTLED',
  CANCELLED: 'CANCELLED'
};

exports.PositionStatus = exports.$Enums.PositionStatus = {
  ACTIVE: 'ACTIVE',
  SETTLED: 'SETTLED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.PayoutStatus = exports.$Enums.PayoutStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.AuctionStatus = exports.$Enums.AuctionStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  ENDING_SOON: 'ENDING_SOON',
  ENDED: 'ENDED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.BidType = exports.$Enums.BidType = {
  MANUAL: 'MANUAL',
  AUTO_BID: 'AUTO_BID',
  PROXY_BID: 'PROXY_BID'
};

exports.AuctionBidStatus = exports.$Enums.AuctionBidStatus = {
  ACTIVE: 'ACTIVE',
  OUTBID: 'OUTBID',
  WINNING: 'WINNING',
  WON: 'WON',
  LOST: 'LOST',
  CANCELLED: 'CANCELLED'
};

exports.SaleType = exports.$Enums.SaleType = {
  AUCTION: 'AUCTION',
  FIXED_PRICE: 'FIXED_PRICE',
  PRIVATE_SALE: 'PRIVATE_SALE',
  TRADE: 'TRADE'
};

exports.BattleType = exports.$Enums.BattleType = {
  MERGER: 'MERGER',
  ACQUISITION: 'ACQUISITION',
  STRATEGIC_ALLIANCE: 'STRATEGIC_ALLIANCE',
  COMPETITIVE_CHALLENGE: 'COMPETITIVE_CHALLENGE',
  MARKET_DOMINATION: 'MARKET_DOMINATION'
};

exports.BattleStatus = exports.$Enums.BattleStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  VOTING: 'VOTING',
  RESOLVING: 'RESOLVING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ProposalType = exports.$Enums.ProposalType = {
  MERGER_PROPOSAL: 'MERGER_PROPOSAL',
  ACQUISITION_OFFER: 'ACQUISITION_OFFER',
  ALLIANCE_TERMS: 'ALLIANCE_TERMS',
  CHALLENGE_TERMS: 'CHALLENGE_TERMS'
};

exports.ProposalStatus = exports.$Enums.ProposalStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.VoteDirection = exports.$Enums.VoteDirection = {
  APPROVE: 'APPROVE',
  REJECT: 'REJECT',
  ABSTAIN: 'ABSTAIN'
};

exports.BattleWinner = exports.$Enums.BattleWinner = {
  INITIATOR: 'INITIATOR',
  TARGET: 'TARGET',
  MUTUAL_BENEFIT: 'MUTUAL_BENEFIT',
  NO_WINNER: 'NO_WINNER'
};

exports.PowerupCategory = exports.$Enums.PowerupCategory = {
  COMBAT: 'COMBAT',
  DEFENSE: 'DEFENSE',
  UTILITY: 'UTILITY',
  SPECIAL: 'SPECIAL',
  LEGENDARY: 'LEGENDARY',
  TEMPORAL: 'TEMPORAL',
  ELEMENTAL: 'ELEMENTAL',
  MYSTICAL: 'MYSTICAL',
  TECHNOLOGICAL: 'TECHNOLOGICAL',
  ECONOMIC: 'ECONOMIC'
};

exports.PowerupRarity = exports.$Enums.PowerupRarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY',
  MYTHIC: 'MYTHIC',
  ARTIFACT: 'ARTIFACT'
};

exports.PowerupSource = exports.$Enums.PowerupSource = {
  PURCHASE: 'PURCHASE',
  CRAFT: 'CRAFT',
  TRADE: 'TRADE',
  REWARD: 'REWARD',
  ACHIEVEMENT: 'ACHIEVEMENT',
  EVENT: 'EVENT',
  QUEST: 'QUEST',
  AIRDROP: 'AIRDROP',
  GENESIS: 'GENESIS'
};

exports.PowerupEffectType = exports.$Enums.PowerupEffectType = {
  STAT_BOOST: 'STAT_BOOST',
  DAMAGE_AMPLIFY: 'DAMAGE_AMPLIFY',
  DEFENSE_BOOST: 'DEFENSE_BOOST',
  SPEED_INCREASE: 'SPEED_INCREASE',
  CRITICAL_CHANCE: 'CRITICAL_CHANCE',
  REGENERATION: 'REGENERATION',
  SHIELD: 'SHIELD',
  STEALTH: 'STEALTH',
  TELEPORT: 'TELEPORT',
  TIME_MANIPULATION: 'TIME_MANIPULATION',
  ELEMENT_INFUSION: 'ELEMENT_INFUSION',
  MIND_CONTROL: 'MIND_CONTROL',
  REALITY_WARP: 'REALITY_WARP',
  DUPLICATION: 'DUPLICATION',
  PHASE_SHIFT: 'PHASE_SHIFT',
  OMNISCIENCE: 'OMNISCIENCE'
};

exports.ModifierType = exports.$Enums.ModifierType = {
  ADD: 'ADD',
  SUBTRACT: 'SUBTRACT',
  MULTIPLY: 'MULTIPLY',
  DIVIDE: 'DIVIDE',
  SET: 'SET',
  PERCENT_INCREASE: 'PERCENT_INCREASE',
  PERCENT_DECREASE: 'PERCENT_DECREASE'
};

exports.PowerupAction = exports.$Enums.PowerupAction = {
  ACQUIRED: 'ACQUIRED',
  APPLIED: 'APPLIED',
  REMOVED: 'REMOVED',
  UPGRADED: 'UPGRADED',
  CRAFTED: 'CRAFTED',
  TRADED: 'TRADED',
  SOLD: 'SOLD',
  PURCHASED: 'PURCHASED',
  ACTIVATED: 'ACTIVATED',
  EXPIRED: 'EXPIRED'
};

exports.PowerupContext = exports.$Enums.PowerupContext = {
  BATTLE: 'BATTLE',
  TRADE: 'TRADE',
  MARKETPLACE: 'MARKETPLACE',
  CRAFTING: 'CRAFTING',
  QUEST: 'QUEST',
  EVENT: 'EVENT',
  TRAINING: 'TRAINING',
  TOURNAMENT: 'TOURNAMENT'
};

exports.PowerupListingType = exports.$Enums.PowerupListingType = {
  FIXED_PRICE: 'FIXED_PRICE',
  AUCTION: 'AUCTION',
  TRADE_ONLY: 'TRADE_ONLY',
  BUNDLE: 'BUNDLE'
};

exports.PowerupListingStatus = exports.$Enums.PowerupListingStatus = {
  ACTIVE: 'ACTIVE',
  SOLD: 'SOLD',
  EXPIRED: 'EXPIRED',
  CANCELED: 'CANCELED',
  RESERVED: 'RESERVED'
};

exports.PurchaseStatus = exports.$Enums.PurchaseStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.TradeStatus = exports.$Enums.TradeStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED',
  EXPIRED: 'EXPIRED'
};

exports.StakingPoolType = exports.$Enums.StakingPoolType = {
  MARKETPLACE_REWARDS: 'MARKETPLACE_REWARDS',
  GOVERNANCE_PARTICIPATION: 'GOVERNANCE_PARTICIPATION',
  LIQUIDITY_PROVISION: 'LIQUIDITY_PROVISION',
  TRADING_BONUSES: 'TRADING_BONUSES'
};

exports.StakingRewardType = exports.$Enums.StakingRewardType = {
  TRADING_FEES: 'TRADING_FEES',
  MARKETPLACE_PROFITS: 'MARKETPLACE_PROFITS',
  GOVERNANCE_REWARDS: 'GOVERNANCE_REWARDS',
  LIQUIDITY_REWARDS: 'LIQUIDITY_REWARDS'
};

exports.GovernanceStatus = exports.$Enums.GovernanceStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  PASSED: 'PASSED',
  REJECTED: 'REJECTED',
  EXECUTED: 'EXECUTED',
  EXPIRED: 'EXPIRED'
};

exports.VoteChoice = exports.$Enums.VoteChoice = {
  YES: 'YES',
  NO: 'NO',
  ABSTAIN: 'ABSTAIN'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserSubscription: 'UserSubscription',
  SubscriptionFeatures: 'SubscriptionFeatures',
  SubscriptionUsage: 'SubscriptionUsage',
  Card: 'Card',
  MarketplaceListing: 'MarketplaceListing',
  Bid: 'Bid',
  Transaction: 'Transaction',
  CryptoWallet: 'CryptoWallet',
  PhysicalCard: 'PhysicalCard',
  Notification: 'Notification',
  SocialFeed: 'SocialFeed',
  Follow: 'Follow',
  AppOrder: 'AppOrder',
  OrderRevision: 'OrderRevision',
  OrderCommunication: 'OrderCommunication',
  OrderDeliverable: 'OrderDeliverable',
  BettingMarket: 'BettingMarket',
  BettingPosition: 'BettingPosition',
  MarketMetrics: 'MarketMetrics',
  BettingPayout: 'BettingPayout',
  CardAuction: 'CardAuction',
  AuctionConditions: 'AuctionConditions',
  AuctionBid: 'AuctionBid',
  AuctionWatcher: 'AuctionWatcher',
  AuctionHistory: 'AuctionHistory',
  MABattle: 'MABattle',
  BattleProposal: 'BattleProposal',
  BattleVoting: 'BattleVoting',
  BattleOutcome: 'BattleOutcome',
  PowerupType: 'PowerupType',
  UserPowerup: 'UserPowerup',
  CardPowerup: 'CardPowerup',
  PowerupEffect: 'PowerupEffect',
  PowerupHistory: 'PowerupHistory',
  PowerupRecipe: 'PowerupRecipe',
  PowerupCraft: 'PowerupCraft',
  PowerupMarketListing: 'PowerupMarketListing',
  PowerupPurchase: 'PowerupPurchase',
  PowerupTrade: 'PowerupTrade',
  StakingPool: 'StakingPool',
  StakingPosition: 'StakingPosition',
  StakingReward: 'StakingReward',
  GovernanceProposal: 'GovernanceProposal',
  GovernanceVote: 'GovernanceVote'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
